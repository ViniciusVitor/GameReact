{"ast":null,"code":"var _jsxFileName = \"/home/orube/projetos/react01/react01/src/jogo/Perguntas.js\";\nimport React, { Component } from 'react';\nimport { Grid, GridRow, GridColumn, Radio, Message, Button, CardContent, Container, Icon, Progress } from 'semantic-ui-react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { Redirect } from 'react-router-dom';\nimport Header from './Header';\n\nclass Perguntas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onRadioChange = (e, {\n      resposta,\n      name\n    }) => {\n      console.log('Chegou no OnRadioChange: ', resposta);\n      this.setState({\n        resposta\n      });\n      const respostaJogador = resposta;\n\n      const respostaCorreta = _.filter(this.state.perguntas.perguntas[name].alternativas, {\n        'correta': true\n      })[0].resposta;\n\n      const acertou = respostaJogador === respostaCorreta;\n      console.log(`a resposta do jogador: ${resposta}`);\n      console.log(`pergunta atual: ${this.state.perguntas.perguntas[name].titulo}`);\n      console.log(`a alternativa correta: ${respostaCorreta}`);\n      console.log(`acertou? ${acertou}`);\n      const res = {\n        pergunta: this.state.perguntas.perguntas[name].titulo,\n        resposta,\n        acertou\n      };\n      this.setState({\n        resultado: [...this.state.resultado, res]\n      });\n\n      if (acertou) {\n        this.setState({\n          pontos: this.state.pontos + 1\n        });\n      }\n    };\n\n    this.state = {\n      perguntas: {},\n      estaCarregando: false,\n      perguntaAtual: 0,\n      totalPerguntas: 0,\n      pontos: 0,\n      resultado: [],\n      terminei: false\n    };\n    this.proximaPergunta = this.proximaPergunta.bind(this);\n  }\n\n  componentDidMount() {\n    this.carregandoPerguntas(this.props.match.params.nome);\n  }\n\n  carregandoPerguntas(cat) {\n    console.log('Categoria da pergunta: ', cat);\n    this.setState({\n      estaCarregando: true,\n      perguntas: {}\n    });\n    const url = `https://projeto-react-653ae.firebaseio.com/categorias.json?orderBy=\"nome\"&equalTo=\"${cat}\"`;\n    axios.get(url).then(dados => {\n      const chave = Object.keys(dados.data)[0];\n      const listaPerguntas = dados.data[chave];\n      console.log('Chaveeee', chave);\n      console.log('Lsita de perguntas', listaPerguntas);\n      console.log('Quantidade de perguntas: ', _.size(listaPerguntas) - 1);\n      this.setState({\n        estaCarregando: false,\n        perguntas: listaPerguntas,\n        totalPerguntas: _.size(listaPerguntas) - 1\n      });\n    }).catch(err => {\n      console.log('Algum problema ocorreu');\n    });\n  }\n\n  proximaPergunta() {\n    const _this$state = this.state,\n          perguntaAtual = _this$state.perguntaAtual,\n          totalPerguntas = _this$state.totalPerguntas;\n    console.log(perguntaAtual, totalPerguntas);\n\n    if (perguntaAtual < totalPerguntas - 1) {\n      this.setState({\n        perguntaAtual: this.state.perguntaAtual + 1\n      });\n    } else {\n      console.log('Terminou as perguntas, mostre as respostas');\n      console.log('PONTUAÇÃO:', this.state.pontos);\n      this.setState({\n        terminei: true\n      });\n    }\n  }\n\n  renderPergunta(pergunta) {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"PERGUNTA:\", pergunta.titulo), console.log('aquiiii', pergunta), React.createElement(Grid, {\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(GridRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(GridColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, JSON.stringify(pergunta.alternativas[1].correta), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, pergunta.alternativas[1].resposta), React.createElement(Radio, {\n      toggle: true,\n      name: \"quiz\",\n      resposta: pergunta.alternativas[1].resposta,\n      onChange: this.onRadioChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))), React.createElement(GridColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"pink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, pergunta.alternativas[2].resposta), React.createElement(Radio, {\n      toggle: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })))), React.createElement(GridRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(GridColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"orange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, pergunta.alternativas[3].resposta), React.createElement(Radio, {\n      toggle: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }))), React.createElement(GridColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, pergunta.alternativas[4].resposta), React.createElement(Radio, {\n      toggle: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }))))));\n  }\n\n  render() {\n    let item = [];\n\n    if (this.state.estaCarregando) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Carregando...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: this.state.perguntas.icone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \" \", this.props.match.params.nome), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Mostre que voc\\xEA conhece tudo sobre esse assunto\"), this.state.perguntas.perguntas && Object.keys(this.state.perguntas.perguntas).map(key => {\n      item.push(key);\n    }), this.state.perguntas.perguntas && this.renderPergunta(this.state.perguntas.perguntas[item[this.state.perguntaAtual]]), React.createElement(Progress, {\n      value: this.state.perguntaAtual + 1,\n      total: item.length,\n      progress: \"ratio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Button, {\n      basic: true,\n      color: \"blue\",\n      onClick: this.proximaPergunta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Pr\\xF3ximo\"))));\n  }\n\n}\n\nexport default Perguntas;","map":{"version":3,"sources":["/home/orube/projetos/react01/react01/src/jogo/Perguntas.js"],"names":["React","Component","Grid","GridRow","GridColumn","Radio","Message","Button","CardContent","Container","Icon","Progress","axios","_","Redirect","Header","Perguntas","constructor","props","onRadioChange","e","resposta","name","console","log","setState","respostaJogador","respostaCorreta","filter","state","perguntas","alternativas","acertou","titulo","res","pergunta","resultado","pontos","estaCarregando","perguntaAtual","totalPerguntas","terminei","proximaPergunta","bind","componentDidMount","carregandoPerguntas","match","params","nome","cat","url","get","then","dados","chave","Object","keys","data","listaPerguntas","size","catch","err","renderPergunta","JSON","stringify","correta","render","item","icone","map","key","push","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {Grid, GridRow, GridColumn, Radio, Message, Button, CardContent, Container, Icon, Progress} from 'semantic-ui-react'\nimport axios from 'axios'\nimport _ from 'lodash'\nimport { Redirect } from 'react-router-dom';\n\nimport Header from './Header'\n\n\nclass Perguntas extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            perguntas: {},\n            estaCarregando: false,\n            perguntaAtual: 0,\n            totalPerguntas: 0,\n            pontos: 0,\n            resultado: [],\n            terminei: false\n        } \n        \n        this.proximaPergunta = this.proximaPergunta.bind(this)\n\n    }\n    componentDidMount(){\n        this.carregandoPerguntas(this.props.match.params.nome)\n    }\n\n    carregandoPerguntas(cat){\n        console.log('Categoria da pergunta: ', cat)\n        this.setState({\n            estaCarregando: true,\n            perguntas: {}\n        })\n\n        const url = `https://projeto-react-653ae.firebaseio.com/categorias.json?orderBy=\"nome\"&equalTo=\"${cat}\"`\n        axios\n            .get(url)\n            .then(dados => {\n                const chave = Object.keys(dados.data)[0]\n                const listaPerguntas = dados.data[chave]\n                console.log('Chaveeee', chave)\n                console.log('Lsita de perguntas', listaPerguntas)\n                console.log('Quantidade de perguntas: ', _.size(listaPerguntas) - 1)\n                this.setState({\n                    estaCarregando: false,\n                    perguntas: listaPerguntas,\n                    totalPerguntas: (_.size(listaPerguntas)-1)\n                })\n            })\n            .catch(err => {\n                console.log('Algum problema ocorreu')\n            })\n    }\n\n    proximaPergunta(){\n        const {perguntaAtual, totalPerguntas} = this.state\n        console.log(perguntaAtual, totalPerguntas)\n        if(perguntaAtual < totalPerguntas -1){\n            this.setState({perguntaAtual: this.state.perguntaAtual +1})\n\n        }else{\n            console.log('Terminou as perguntas, mostre as respostas')\n            console.log('PONTUAÇÃO:', this.state.pontos)\n            this.setState({\n                terminei: true\n            })\n            \n        }\n\n    }\n    onRadioChange = (e, {resposta, name}) => {\n        console.log('Chegou no OnRadioChange: ', resposta)\n        this.setState({resposta})\n\n        const respostaJogador = resposta\n        const respostaCorreta = _.filter(this.state.perguntas.perguntas[name].alternativas, {'correta': true})[0].resposta\n        const acertou = (respostaJogador === respostaCorreta)\n\n        console.log(`a resposta do jogador: ${resposta}`)\n        console.log(`pergunta atual: ${this.state.perguntas.perguntas[name].titulo}`)\n        console.log(`a alternativa correta: ${respostaCorreta}`)\n        console.log(`acertou? ${acertou}`)\n        const res = {\n            pergunta: this.state.perguntas.perguntas[name].titulo,\n            resposta,\n            acertou\n        }\n        this.setState({resultado: [...this.state.resultado, res]})\n        if (acertou) {\n            this.setState({\n                pontos: this.state.pontos + 1\n            })\n        }\n    }\n\n    renderPergunta(pergunta){\n        return (\n            <span >\n                <h3>PERGUNTA:{pergunta.titulo}</h3>\n                {console.log('aquiiii', pergunta)}\n                <Grid columns={2}>\n                <GridRow>              \n\n                    <GridColumn>\n                        <Message color='blue'>\n                            {JSON.stringify(pergunta.alternativas[1].correta)}\n                            <p>{pergunta.alternativas[1].resposta}</p>                                \n                            <Radio toggle\n                                name='quiz'\n                                resposta={pergunta.alternativas[1].resposta}\n                                onChange={this.onRadioChange}\n                            \n                            \n                            />                            \n                        </Message>                        \n\n                    </GridColumn>\n                    <GridColumn>\n                        <Message color='pink'>\n                            <p>{pergunta.alternativas[2].resposta}</p>                                \n                            <Radio toggle/>                            \n                        </Message>  \n                    </GridColumn>\n                </GridRow>\n\n                <GridRow>\n                    <GridColumn>\n                        <Message color='orange'>\n                            <p>{pergunta.alternativas[3].resposta}</p>                                \n                            <Radio toggle/>                            \n                        </Message>  \n                    </GridColumn>\n                    <GridColumn>\n                        <Message color='green'>\n                            <p>{pergunta.alternativas[4].resposta}</p>                                \n                            <Radio toggle/>                            \n                        </Message>  \n                    </GridColumn>                        \n                </GridRow>\n            </Grid>\n        </span>\n        )\n    }\n    \n    \n    render(){\n\n        let item = []\n        if(this.state.estaCarregando){\n            return <p>Carregando...</p>\n        }\n\n        return(\n            <div>\n                <Header /> \n                              \n                <h2><Icon name={this.state.perguntas.icone}/> {this.props.match.params.nome}</h2>\n                <p>Mostre que você conhece tudo sobre esse assunto</p>\n                \n                {\n\n                    this.state.perguntas.perguntas && Object.keys(this.state.perguntas.perguntas)\n                    .map(key =>{\n                        item.push(key)\n                    })\n                }\n                {\n                    this.state.perguntas.perguntas && this.renderPergunta(this.state.perguntas.perguntas[item[this.state.perguntaAtual]])\n\n                    \n                }\n                \n                <Progress value={this.state.perguntaAtual + 1} total= {item.length} progress='ratio'/>\n                <Container>\n                    <CardContent>\n                        <Button basic color='blue' onClick={this.proximaPergunta}>Próximo</Button>\n                    </CardContent>\n                </Container>   \n             \n            </div>    \n        )\n    }\n    }\n\nexport default Perguntas"]},"metadata":{},"sourceType":"module"}